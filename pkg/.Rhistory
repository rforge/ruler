sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99), 1,replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99), replace = T) # generating a constant for functions that would use it
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99), replace = T)
)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99)), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99),99), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99),0.7), replace = T)
length(c(1:99,0))
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:99,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/99,99),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
generate
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(f,s)
fun<-sample(rulenames,1) #generating function from the list of functions
generate(iii,fun,c)
fun
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(f,s)
fun<-eval(parse(text=sample(rulenames,1))) #generating function from the list of functions
generate(iii,fun,c)
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-eval(parse(text=sample(rulenames,1))) #generating function from the list of functions and evaluating it by its name
generate(iii,fun,c)
iii
fun
f
s
c
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
generate(iii,eval(parse(text=fun),c)
)
fun
s
f
c
p<-generate(iii,eval(parse(text=fun),c))
p
as.numeric(unlist(p))
as.numeric(unlist(p))
p<-as.numeric(unlist(p))
p
p[1]
p[2]
p<-generate(iii,eval(parse(text=fun),c))
p
unlist(p)
as.numeric(unlist(p))
as.vector(unlist(p))
as.vector(unlist(p))[1]
help(unlist)
as.vector(unlist(p),recursive=F)
as.vector(unlist(p),recursive=FALSE)
print(unlist(p),collapse="")
help(print)
paste(unlist(p),collapse="")
as.numeric(paste(unlist(p),collapse=""))
paste(unlist(p),collapse="")
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="")
seq1
seq2
as.numeric(seq2)
as.float(seq2)
typeof(seq2)
seq2
as.long(seq2)
long(seq2)
seq2
help(typeof)
as.numeric(seq2)
numeric(seq2)
help(numeric)
numeric
as.integer(seq2)
seq2
is.double(as.numeric(seq2))
is.real(as.numeric(seq2))
seq2
typeof(seq2)
g=123325698888888888233556
g
typeof(g)
g<-as.numeric(seq2)
g
g==7893105111114120
g==7893105111114121
g==7893105111114124
g==789310511111124
seq2
seq1
seq3<-as.numeric(seq2)
seq2
seq3
newtree <- function(firstval,inc) {
m <- matrix(rep(NA,inc*3),nrow=inc,ncol=3)
m[1,3] <- firstval
return(list(mat=m,nxt=2,inc=inc))
}
ins <- function(hdidx,tr,newval) {
dir <- if (newval <= tr$mat[hdidx,3]) 1 else 2 # which direction will this new node go, left or right?
# if null link in that direction, place the new node here, otherwise
# recurse
if (is.na(tr$mat[hdidx,dir])) {
newidx <- tr$nxt # where new node goes
if (tr$nxt == nrow(tr$mat) + 1) {# check for room to add a new element
tr$mat <- rbind(tr$mat, matrix(rep(NA,tr$inc*3),nrow=tr$inc,ncol=3))
}
tr$mat[newidx,3] <- newval # insert new tree node
tr$mat[hdidx,dir] <- newidx# link to the new node
tr$nxt <- tr$nxt + 1 # ready for next insert
return(tr)
} else tr <- ins(tr$mat[hdidx,dir],tr,newval)
}
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(seq2)
}
}
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(seq2)
}
}
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(seq1)
}
}
createSequence()
createSequence()
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(paste("generation",i,"is\n",seq1))
}
}
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(paste("generation",i,"is/n",seq1))
}
}
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(paste("generation",i,"is",seq1))
}
}
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(paste("generation",i,"is"/n,seq1,))
}
}
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(paste("generation",i,"is"\n,seq1,))
}
}
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
print(paste("generation",i,"is \n",seq1,))
}
}
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
print("jvuviiv \n nbubobob")
print(paste("jvuviiv"," \n","nbubobob"))
print(paste("jvuviiv"," /n","nbubobob"))
cat("hello\nworld\n")
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
cat(paste("generation",i,"is \n",seq1,))
}
}
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
f<-sample(c(1:99), 1,replace = T)
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T)
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T)
iii<-createItem(first=f,second=s)
fun<-sample(rulenames,1)
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
seq1<-generate(iii,eval(parse(text=fun),c))
f
s
c
iii
fun
seq1<-generate(iii,eval(parse(text=fun),c))
cat(paste("bdudufu\nididiidi",c))
cat(paste("generation",i,"is \n",seq1,"\n Item", iii, "\n rule", fun))
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
c<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),c)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
cat(paste("generation",i,"is \n",seq1,"\n Item", iii, "\n rule", fun))
}
}
createSequence()
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
co<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),co)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
cat(paste("generation",i,"is \n",seq1,"\n Item", iii, "\n rule", fun))
}
}
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
co<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),co))
seq1
f
s
co#
co
iii
fun
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
co<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),co))
seq1
iii
fun
createSequence<-function(n=6){          #a function to creates n sequences (default number of sequences is 6)
for(i in 1:n){
f<-sample(c(1:99), 1,replace = T) # argument 'first' for object from class "Item" generated from between 1 and 99. All numers are chosen at the same probability
s<-sample(c(1:99,0), 1, prob = c(rep(0.3/99,99),0.7), replace = T) # argument 'second' for object from class "Item" generated from between . Zero should be chosen with greater probability
co<-sample(c(1:50,0), 1,prob = c(rep(0.3/50,50),0.7), replace = T) # generating a constant for functions that would use it
iii<-createItem(first=f,second=s) #creating an item named 'iii' where first=f and second=s
fun<-sample(rulenames,1) #generating function from the list of functions and evaluating it by its name
seq1<-generate(iii,eval(parse(text=fun),co)) #generating the random sequence
seq2<-paste(unlist(seq1),collapse="") #transorming a sequence into a single number (that can be stored in a tree)
seq3<-as.numeric(seq2) # in this form I will save the sequence in a tree
#cat(paste("generation",i,"is \n",seq1,"\n Item", iii, "\n rule", fun))
}
cat(paste("generation",i,"is \n",seq1,"\n Item", iii, "\n rule", fun))
}
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
createSequence()
